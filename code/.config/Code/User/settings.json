{
  "breadcrumbs.enabled": false,
  "editor.acceptSuggestionOnEnter": "smart",
  "editor.cursorSurroundingLines": 4,
  "editor.fontFamily": "FiraCode Nerd Font",
  "editor.fontSize": 14,
  "editor.fontLigatures": true,
  "editor.cursorBlinking": "phase",
  "editor.cursorSmoothCaretAnimation": "on",
  "editor.smoothScrolling": true,
  "editor.minimap.enabled": false,
  "editor.scrollbar.verticalScrollbarSize": 0,
  "editor.scrollbar.horizontalScrollbarSize": 0,
  "editor.bracketPairColorization.enabled": true,
  "editor.formatOnSave": true,
  "editor.tabSize": 2,
  "editor.suggest.matchOnWordStartOnly": false,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.unicodeHighlight.nonBasicASCII": false,
  "terminal.integrated.smoothScrolling": true,
  "terminal.integrated.fontSize": 14,
  "terminal.integrated.fontFamily": "FiraCode Nerd Font",
  "terminal.integrated.gpuAcceleration": "on",
  "terminal.integrated.cursorBlinking": true,
  "terminal.integrated.shellIntegration.enabled": true,
  "workbench.startupEditor": "none",
  "workbench.list.smoothScrolling": true,
  "workbench.layoutControl.enabled": false,
  "workbench.productIconTheme": "fluent-icons",
  "explorer.confirmDragAndDrop": false,
  "explorer.confirmDelete": false,
  "explorer.autoReveal": true,
  "window.commandCenter": false,
  "window.newWindowDimensions": "offset",
  "window.title": "${dirty}${activeEditorShort}${separator}${rootName}",
  "window.titleBarStyle": "custom",
  "security.workspace.trust.untrustedFiles": "open",
  "telemetry.telemetryLevel": "off",
  "git.autofetch": true,
  "git.enableSmartCommit": true,
  "git.confirmSync": false,
  "git.pullBeforeCheckout": true,
  "git.ignoreRebaseWarning": true,
  "markdown.updateLinksOnFileMove.enabled": "always",
  "markdown.validate.enabled": true,
  "[json]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "[jsonc]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "[lua]": {
    "editor.defaultFormatter": "sumneko.lua"
  },
  "[typescript]": {
    "editor.defaultFormatter": "vscode.typescript-language-features"
  },
  "typescript.updateImportsOnFileMove.enabled": "always",
  "javascript.updateImportsOnFileMove.enabled": "always",
  "eslint.format.enable": true,
  // "vim.leader": "space",
  "vim.useSystemClipboard": true,
  "vim.handleKeys": {
    "<C-w>": true,
    "<C-i>": false,
    "<C-o>": false,
    "<C-a>": false,
    "<C-x>": false,
    "<C-b>": false,
    "<C-f>": false,
    "<C-n>": false,
    "<C-p>": false,
    "<C-k>": false,
  },
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      "before": [
        "<space>"
      ],
      "commands": [
        "whichkey.show"
      ]
    },
    {
      "before": [
        "K"
      ],
      "commands": [
        "editor.action.showHover"
      ],
      "silent": true
    },
    {
      "before": [
        "H"
      ],
      "after": [
        "^"
      ]
    },
    {
      "before": [
        "L"
      ],
      "after": [
        "$"
      ]
    },
    { // don't yank deleted char with x
      "before": [
        "x"
      ],
      "after": [
        "\"",
        "_",
        "x"
      ]
    },
    { // yank that behaves behaves like C and D
      "before": [
        "Y"
      ],
      "after": [
        "y",
        "$"
      ]
    },
    {
      "before": [
        "j"
      ],
      "after": [
        "g",
        "j"
      ]
    },
    {
      "before": [
        "k"
      ],
      "after": [
        "g",
        "k"
      ]
    },
    {
      "before": [
        ";",
      ],
      "after": [
        ":"
      ]
    },
    /* goto keys */
    /*
      d	Go to definition	command	editor.action.revealDefinition
      h	Show call hierarchy	command	references-view.showCallHierarchy
      r	Go to reference	command	editor.action.goToReferences
      s	Go to symbol in buffer	command	workbench.action.gotoSymbol
      t	Go to type definition	command	editor.action.goToTypeDefinition
      i Go to implementation
      o Go to link
      f Go to file from text
    */
    {
      "before": [
        "g",
        "d"
      ],
      "commands": [
        "editor.action.revealDefinition"
      ]
    },
    {
      "before": [
        "g",
        "h"
      ],
      "commands": [
        "references-view.showCallHierarchy"
      ]
    },
    {
      "before": [
        "g",
        "r"
      ],
      "commands": [
        "editor.action.goToReferences"
      ]
    },
    {
      "before": [
        "g",
        "s"
      ],
      "commands": [
        "workbench.action.gotoSymbol"
      ]
    },
    {
      "before": [
        "g",
        "t"
      ],
      "commands": [
        "editor.action.goToTypeDefinition"
      ]
    },
    {
      "before": [
        "g",
        "i"
      ],
      "commands": [
        "editor.action.goToImplementation"
      ]
    },
    {
      "before": [
        "g",
        "l"
      ],
      "commands": [
        "editor.action.openLink"
      ]
    },
    {
      "before": [
        "g",
        "f"
      ],
      "commands": [
        "seito-openfile.openFileFromText"
      ]
    },
    /*
      d	Peek definition	command	editor.action.peekDefinition
      h	Peek call hierarchy	command	editor.showCallHierarchy
      i	Peek implementations	command	editor.action.peekImplementation
      r	Peek references	command	editor.action.referenceSearch.trigger
      t	Peek type definition	command	editor.action.peekTypeDefinition
    */
    {
      "before": [
        "g",
        "p",
        "d"
      ],
      "commands": [
        "editor.action.peekDefinition"
      ]
    },
    {
      "before": [
        "g",
        "p",
        "h"
      ],
      "commands": [
        "editor.showCallHierarchy"
      ]
    },
    {
      "before": [
        "g",
        "p",
        "i"
      ],
      "commands": [
        "editor.action.peekImplementation"
      ]
    },
    {
      "before": [
        "g",
        "p",
        "r"
      ],
      "commands": [
        "editor.action.referenceSearch.trigger"
      ]
    },
    {
      "before": [
        "g",
        "p",
        "t"
      ],
      "commands": [
        "editor.action.peekTypeDefinition"
      ]
    },
  ],
  "vim.insertModeKeyBindings": [
    { // easier edit mode exit
      "before": [
        "j",
        "k"
      ],
      "after": [
        "<Esc>"
      ]
    },
  ],
  "vim.visualModeKeyBindingsNonRecursive": [
    {
      "before": [
        "<space>"
      ],
      "commands": [
        "whichkey.show"
      ]
    },
    {
      "before": [
        ";",
      ],
      "after": [
        ":"
      ]
    },
    { // paste without yanking selection
      "before": [
        "p"
      ],
      "after": [
        "\"",
        "_",
        "d",
        "P"
      ]
    },
    {
      "before": [
        ">"
      ],
      "commands": [
        "editor.action.indentLines"
      ]
    },
    {
      "before": [
        "<"
      ],
      "commands": [
        "editor.action.outdentLines"
      ]
    }
  ],
  "whichkey.delay": 0,
  "whichkey.sortOrder": "alphabetically",
  "whichkey.showButtons": false,
  "whichkey.bindings": [
    {
      "key": "n",
      "name": "Next buffer",
      "type": "command",
      "command": "workbench.action.nextEditor"
    },
    {
      "key": "p",
      "name": "Previous buffer",
      "type": "command",
      "command": "workbench.action.previousEditor"
    },
    {
      "key": "r",
      "name": "Rename symbol",
      "type": "command",
      "command": "editor.action.rename"
    },
    {
      "key": "c",
      "name": "Copilot+",
      "type": "bindings",
      "bindings": [
        {
          "key": "c",
          "name": "Open chat",
          "type": "command",
          "command": "workbench.action.openChat.copilot"
        },
        {
          "key": "q",
          "name": "Open quick chat",
          "type": "command",
          "command": "workbench.action.openQuickChat.copilot"
        },
        {
          "key": "i",
          "name": "Open inline chat",
          "type": "command",
          "command": "inlineChat.start"
        },
        {
          "key": "p",
          "name": "Focus panel chat",
          "type": "command",
          "command": "workbench.panel.chat.view.copilot.focus"
        },
        {
          "key": "e",
          "name": "Explain this",
          "type": "command",
          "command": "github.copilot.interactiveEditor.explain"
        },
        {
          "key": "f",
          "name": "Fix this",
          "type": "command",
          "command": "github.copilot.interactiveEditor.fix"
        },
        {
          "key": "a",
          "name": "Accept panel solution",
          "type": "command",
          "command": "github.copilot.acceptCursorPanelSolution"
        }
      ]
    },
    {
      "key": "f",
      "name": "File+",
      "type": "bindings",
      "bindings": [
        {
          "key": "n",
          "name": "New File",
          "type": "command",
          "command": "explorer.newFile"
        },
        {
          "key": "r",
          "name": "Rename file",
          "type": "command",
          "command": "renameFile"
        },
        {
          "key": "d",
          "name": "Delete file",
          "type": "command",
          "command": "deleteFile"
        },
        {
          "key": "f",
          "name": "Format document",
          "type": "command",
          "command": "editor.action.formatDocument"
        },
        {
          "key": "s",
          "name": "Save without formatting",
          "type": "command",
          "command": "workbench.action.files.saveWithoutFormatting"
        },
        {
          "key": "e",
          "name": "Reveal in system explorer",
          "type": "command",
          "command": "revealFileInOS"
        },
        {
          "key": "c",
          "name": "Copy+",
          "type": "bindings",
          "bindings": [
            {
              "key": "p",
              "name": "Copy path",
              "type": "command",
              "command": "copyFilePath"
            },
            {
              "key": "r",
              "name": "Copy relative path",
              "type": "command",
              "command": "copyRelativeFilePath"
            }
          ]
        }
      ]
    },
    {
      "key": "w",
      "name": "Window+",
      "type": "bindings",
      "bindings": [
        {
          "key": "r",
          "name": "Reload window",
          "type": "command",
          "command": "workbench.action.reloadWindow"
        },
        {
          "key": "e",
          "name": "Focus explorer",
          "type": "command",
          "command": "workbench.view.explorer"
        },
        {
          "key": "p",
          "name": "Focus panel chat",
          "type": "command",
          "command": "workbench.panel.chat.view.copilot.focus"
        },
        {
          "key": "c",
          "name": "Toggle centered layout",
          "type": "command",
          "command": "workbench.action.toggleCenteredLayout"
        },
        {
          "key": "z",
          "name": "Toggle zen mode",
          "type": "command",
          "command": "workbench.action.toggleZenMode"
        }
      ]
    },
    {
      "key": "m",
      "name": "Markdown+",
      "type": "bindings",
      "bindings": [
        {
          "key": "c",
          "name": "Check task",
          "type": "command",
          "command": "markdown.extension.checkTaskList",
        },
        {
          "key": "p",
          "name": "Show preview",
          "type": "command",
          "command": "markdown.showPreview"
        },
        {
          "key": "b",
          "name": "Toggle bold",
          "type": "command",
          "command": "markdown.extension.editing.toggleBold",
        },
        {
          "key": "i",
          "name": "Toggle italic",
          "type": "command",
          "command": "markdown.extension.editing.toggleItalic",
        },
      ]
    }
  ],
  "terminal.integrated.defaultProfile.linux": "tmux",
  "terminal.integrated.profiles.linux": {
    "tmux": {
      "path": "zsh",
      "icon": "terminal-tmux",
      "args": [
        "-c",
        "tmux new-session -A -s ${PWD##*/}"
      ]
    },
  },
  /* extensions */
  "errorLens.enabledDiagnosticLevels": [
    "error",
  ],
  "errorLens.onSave": true,
  "errorLens.gutterIconsEnabled": true,
  "errorLens.delay": 50,
  "todo-tree.general.statusBar": "total",
  "todo-tree.general.statusBarClickBehaviour": "cycle",
  "todo-tree.general.showIconsInsteadOfTagsInStatusBar": false,
  "todo-tree.regex.regex": "(//|#|<!--|;|/\\*|^|^\\s*(-|\\d+.))\\s*($TAGS)",
  "todo-tree.general.tags": [
    "TODO", //todo
    "NOTE", //note
    "HACK", //hacky solution
    "BUG", //broken bug location
    "FIXME", //needs fixing but not a bug
    "[x]", //done task
    "[ ]", //incomplete task
    "[f]", //failed task
    "[c]", //cancelled task
  ],
  "todo-tree.highlights.defaultHighlight": {
    "foreground": "#ed8796",
    "background": "#ed8796",
    "iconColour": "#ed8796",
    "opacity": 25,
    "icon": "check",
    "type": "text-and-comment",
    "gutterIcon": true,
  },
  "todo-tree.highlights.customHighlight": {
    "TODO": {
      "foreground": "#eed49f",
      "background": "#eed49f",
      "iconColour": "#eed49f",
      "icon": "plus-circle",
    },
    "NOTE": {
      "foreground": "#a6da95",
      "background": "#a6da95",
      "iconColour": "#a6da95",
      "icon": "book",
    },
    "HACK": {
      "foreground": "#c6a0f6",
      "background": "#c6a0f6",
      "iconColour": "#c6a0f6",
      "icon": "plug",
    },
    "BUG": {
      "foreground": "#ed8796",
      "background": "#ed8796",
      "iconColour": "#ed8796",
      "icon": "bug",
    },
    "FIXME": {
      "foreground": "#f5a97f",
      "background": "#f5a97f",
      "iconColour": "#f5a97f",
      "icon": "tools",
    },
    "[x]": { //complete
      "foreground": "#a6da95",
      "background": "#a6da95",
      "iconColour": "#a6da95",
      "icon": "check-circle-fill",
      "type": "tag",
    },
    "[ ]": { //incomplete
      "foreground": "#ed8796",
      "background": "#ed8796",
      "iconColour": "#ed8796",
      "icon": "diamond",
      "type": "tag",
    },
    "[f]": { //failed
      "foreground": "#f5a97f",
      "background": "#f5a97f",
      "iconColour": "#f5a97f",
      "icon": "eye-closed",
      "type": "tag",
    },
    "[c]": { //cancelled
      "foreground": "#eed49f",
      "background": "#eed49f",
      "iconColour": "#eed49f",
      "icon": "diff-ignored",
      "type": "tag",
    },
  },
  "cSpell.language": "de,en,lorem",
  "cSpell.caseSensitive": false,
  "cSpell.allowCompoundWords": true,
  "cSpell.userWords": [
    "antfu",
    "Nuxt"
  ],
  "[vue]": {
    "editor.defaultFormatter": "Vue.volar"
  },
  "gutterpreview.showUnderline": false,
  "gutterpreview.showImagePreviewOnGutter": false,
}